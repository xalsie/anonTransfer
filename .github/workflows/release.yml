name: Release and Publish

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    release:
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

        permissions:
            contents: write
            packages: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "24"
                  registry-url: "https://npm.pkg.github.com"
                  scope: "@${{ github.repository_owner }}"

            - name: Install dependencies
              run: npm i

            - name: Build project
              run: npm run build

            - name: Run tests
              run: npm test

            - name: Configure Git
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"

            - name: Bump version
              id: version
              run: |
                  # Get current version
                  CURRENT_VERSION=$(node -p "require('./package.json').version")
                  echo "Current version: $CURRENT_VERSION"

                  # Increment patch version
                  NEW_VERSION=$(node -p "
                    const version = require('./package.json').version;
                    const parts = version.split('.');
                    parts[2] = String(parseInt(parts[2]) + 1);
                    parts.join('.');
                  ")
                  echo "New version: $NEW_VERSION"

                  # Update package.json
                  npm version $NEW_VERSION --no-git-tag-version

                  # Commit changes
                  git add package.json
                  git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
                  git push origin main

                  # Set output
                  echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
                  echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

            - name: Create dist archive
              run: |
                  tar -czf gofile-${{ steps.version.outputs.version }}-dist.tar.gz dist/

            - name: Verify package contents before publishing
              run: |
                  echo "Checking dist folder contents:"
                  ls -la dist/
                  echo "Checking files array in package.json:"
                  node -p "require('./package.json').files"

            - name: Prepare package for publishing
              run: |
                  # Create a copy of package.json for publishing
                  cp package.json package.json.backup

                  # Update package.json for GitHub Package Registry
                  node -e "
                    const fs = require('fs');
                    const pkg = require('./package.json');
                    pkg.name = '@${{ github.repository_owner }}/gofile';
                    pkg.publishConfig = {
                      registry: 'https://npm.pkg.github.com'
                    };
                    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
                  "

                  echo "Updated package.json for publishing:"
                  cat package.json

            - name: Test what would be published
              run: |
                  echo "Files that would be included in the package:"
                  npm pack --dry-run

            - name: Publish to GitHub Package Registry
              run: npm publish
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Restore original package.json
              run: |
                  mv package.json.backup package.json

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ steps.version.outputs.tag }}
                  name: Release ${{ steps.version.outputs.tag }}
                  body: |
                      ## Changes in this Release

                      - Auto-generated release for version ${{ steps.version.outputs.version }}
                      - Built from commit: ${{ github.sha }}

                      ## Installation

                      ```bash
                      npm install @${{ github.repository_owner }}/gofile@${{ steps.version.outputs.version }}
                      ```
                  draft: false
                  prerelease: false
                  files: gofile-${{ steps.version.outputs.version }}-dist.tar.gz
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    build-and-test:
        runs-on: ubuntu-latest
        if: github.event_name == 'pull_request'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "24"

            - name: Install dependencies
              run: npm i

            - name: Build project
              run: npm run build

            - name: Run tests
              run: npm test
